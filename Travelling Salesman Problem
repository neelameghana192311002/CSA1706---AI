from itertools import permutations

def tsp_brute_force(graph, start):
    cities = list(graph.keys())
    cities.remove(start)
    min_cost = float('inf')
    best_path = []

    for perm in permutations(cities):
        cost = 0
        path = [start] + list(perm) + [start]
        for i in range(len(path)-1):
            cost += graph[path[i]][path[i+1]]
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# MAIN
n = int(input("Enter number of cities: "))
graph = {}

print("Enter distance matrix row by row:")
city_names = input("Enter city names separated by space: ").split()

for i in range(n):
    distances = list(map(int, input(f"Distances from {city_names[i]}: ").split()))
    graph[city_names[i]] = dict(zip(city_names, distances))

start_city = input("Enter starting city: ").strip()

# Solve TSP
path, cost = tsp_brute_force(graph, start_city)

print("\nShortest path:", " -> ".join(path))
print("Minimum cost:", cost)
